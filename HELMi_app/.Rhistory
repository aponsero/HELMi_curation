#infants frequency questionnaires: (E_Previous3Months, C_4to6months, D_7to12months, B_0to3months)
all_fam_wide <- all_fam_wide %>% mutate(all_reg=E_Previous3Months+C_4to6months+
D_7to12months+B_0to3months)
#parents questionnaires: (G_ParentF_FoodFrequency, G_ParentM_FoodFrequency, G_MotherDepression, G_MotherStress (in progress))
all_fam_wide <- all_fam_wide %>% mutate(all_parents=G_ParentF_FoodFrequency+G_ParentM_FoodFrequency+
G_MotherDepression)
# all main questionnaires
all_fam_wide <- all_fam_wide %>% mutate(all_main=all_inf+all_reg+all_parents)
write.csv(all_fam_wide, "per_familly_questionnaires.csv")
## output table
max_inf <- all_fam_wide %>% filter(all_inf==3) %>% tally() %>%
rename("all infants"="n")
max_reg <- all_fam_wide %>% filter(all_reg==38) %>% tally()%>%
rename("all infants frequency"="n")
max_parents <- all_fam_wide %>% filter(all_parents==5) %>% tally()%>%
rename("all parents"="n")
View(max_parents)
# looking at the number of families filling the regular questionnaires
all_fam_wide <- all_fam %>% pivot_wider(names_from=questionnaire, values_from=nb_filled) %>% replace(is.na(.), 0) %>%
mutate(F1_NutritionMotor_year1=F1_NutritionMotorDev_year1_Version2+F1_NutritionMotorDev_year1_Version1)%>%
mutate(F1_NutritionMotor_year2=F2_NutritionMotorDev_year2_Version2+F2_NutritionMotorDev_year2_Version1)
#infants questionnaires (background, Nutrition/Motor year 1 and 2)
all_fam_wide <- all_fam_wide %>% mutate(all_inf=A_background+F1_NutritionMotor_year1+F1_NutritionMotor_year2)
#infants frequency questionnaires: (E_Previous3Months, C_4to6months, D_7to12months, B_0to3months)
all_fam_wide <- all_fam_wide %>% mutate(all_reg=E_Previous3Months+C_4to6months+
D_7to12months+B_0to3months)
#parents questionnaires: (G_ParentF_FoodFrequency, G_ParentM_FoodFrequency, G_MotherDepression, G_MotherStress (in progress))
all_fam_wide <- all_fam_wide %>% mutate(all_parents=G_ParentF_FoodFrequency+G_ParentM_FoodFrequency+
G_MotherDepression)
# all main questionnaires
all_fam_wide <- all_fam_wide %>% mutate(all_main=all_inf+all_reg+all_parents)
write.csv(all_fam_wide, "per_familly_questionnaires.csv")
## output table
max_inf <- all_fam_wide %>% filter(all_inf==3) %>% tally() %>%
rename("all infants"="n")
max_reg <- all_fam_wide %>% filter(all_reg==38) %>% tally()%>%
rename("all infants frequency"="n")
max_parents <- all_fam_wide %>% filter(all_parents==5) %>% tally()%>%
rename("all parents"="n")
max_all <- all_fam_wide %>% filter(all_main==46) %>% tally()%>%
rename("all major questionnaires"="n")
max_infreg <- all_fam_wide %>% filter(all_reg==38 & all_inf==3) %>% tally()%>%
rename("all major infants and frequency"="n")
most_infreg <- all_fam_wide %>% filter(all_reg>=35 & all_inf==3) %>% tally()%>%
rename("all major infants and most frequency"="n")
table_out <- max_inf %>% add_column(max_reg) %>%
add_column(max_reg) %>%
add_column(max_parents) %>%
add_column(max_all) %>%
add_column(max_infreg) %>%
add_column(most_infreg)
# looking at the number of families filling the regular questionnaires
all_fam_wide <- all_fam %>% pivot_wider(names_from=questionnaire, values_from=nb_filled) %>% replace(is.na(.), 0) %>%
mutate(F1_NutritionMotor_year1=F1_NutritionMotorDev_year1_Version2+F1_NutritionMotorDev_year1_Version1)%>%
mutate(F1_NutritionMotor_year2=F2_NutritionMotorDev_year2_Version2+F2_NutritionMotorDev_year2_Version1)
#infants questionnaires (background, Nutrition/Motor year 1 and 2)
all_fam_wide <- all_fam_wide %>% mutate(all_inf=A_background+F1_NutritionMotor_year1+F1_NutritionMotor_year2)
#infants frequency questionnaires: (E_Previous3Months, C_4to6months, D_7to12months, B_0to3months)
all_fam_wide <- all_fam_wide %>% mutate(all_reg=E_Previous3Months+C_4to6months+
D_7to12months+B_0to3months)
#parents questionnaires: (G_ParentF_FoodFrequency, G_ParentM_FoodFrequency, G_MotherDepression, G_MotherStress (in progress))
all_fam_wide <- all_fam_wide %>% mutate(all_parents=G_ParentF_FoodFrequency+G_ParentM_FoodFrequency+
G_MotherDepression)
# all main questionnaires
all_fam_wide <- all_fam_wide %>% mutate(all_main=all_inf+all_reg+all_parents)
write.csv(all_fam_wide, "per_familly_questionnaires.csv")
## output table
max_inf <- all_fam_wide %>% filter(all_inf==3) %>% tally() %>%
rename("all infants"="n")
max_reg <- all_fam_wide %>% filter(all_reg==38) %>% tally()%>%
rename("all infants frequency"="n")
max_parents <- all_fam_wide %>% filter(all_parents==5) %>% tally()%>%
rename("all parents"="n")
max_all <- all_fam_wide %>% filter(all_main==46) %>% tally()%>%
rename("all major questionnaires"="n")
max_infreg <- all_fam_wide %>% filter(all_reg==38 & all_inf==3) %>% tally()%>%
rename("all major infants and frequency"="n")
most_infreg <- all_fam_wide %>% filter(all_reg>=35 & all_inf==3) %>% tally()%>%
rename("all major infants and most frequency"="n")
table_out <- max_inf %>% add_column(max_reg) %>%
add_column(max_parents) %>%
add_column(max_all) %>%
add_column(max_infreg) %>%
add_column(most_infreg)
View(table_out)
?pivot_longer()
# looking at the number of families filling the regular questionnaires
all_fam_wide <- all_fam %>% pivot_wider(names_from=questionnaire, values_from=nb_filled) %>% replace(is.na(.), 0) %>%
mutate(F1_NutritionMotor_year1=F1_NutritionMotorDev_year1_Version2+F1_NutritionMotorDev_year1_Version1)%>%
mutate(F1_NutritionMotor_year2=F2_NutritionMotorDev_year2_Version2+F2_NutritionMotorDev_year2_Version1)
#infants questionnaires (background, Nutrition/Motor year 1 and 2)
all_fam_wide <- all_fam_wide %>% mutate(all_inf=A_background+F1_NutritionMotor_year1+F1_NutritionMotor_year2)
#infants frequency questionnaires: (E_Previous3Months, C_4to6months, D_7to12months, B_0to3months)
all_fam_wide <- all_fam_wide %>% mutate(all_reg=E_Previous3Months+C_4to6months+
D_7to12months+B_0to3months)
#parents questionnaires: (G_ParentF_FoodFrequency, G_ParentM_FoodFrequency, G_MotherDepression, G_MotherStress (in progress))
all_fam_wide <- all_fam_wide %>% mutate(all_parents=G_ParentF_FoodFrequency+G_ParentM_FoodFrequency+
G_MotherDepression)
# all main questionnaires
all_fam_wide <- all_fam_wide %>% mutate(all_main=all_inf+all_reg+all_parents)
write.csv(all_fam_wide, "per_familly_questionnaires.csv")
## output table
max_inf <- all_fam_wide %>% filter(all_inf==3) %>% tally() %>%
rename("all infants"="n")
max_reg <- all_fam_wide %>% filter(all_reg==38) %>% tally()%>%
rename("all infants frequency"="n")
max_parents <- all_fam_wide %>% filter(all_parents==5) %>% tally()%>%
rename("all parents"="n")
max_all <- all_fam_wide %>% filter(all_main==46) %>% tally()%>%
rename("all major questionnaires"="n")
max_infreg <- all_fam_wide %>% filter(all_reg==38 & all_inf==3) %>% tally()%>%
rename("all major infants and frequency"="n")
most_infreg <- all_fam_wide %>% filter(all_reg>=35 & all_inf==3) %>% tally()%>%
rename("all major infants and most frequency"="n")
table_out <- max_inf %>% add_column(max_reg) %>%
add_column(max_parents) %>%
add_column(max_all) %>%
add_column(max_infreg) %>%
add_column(most_infreg) %>%
pivot_longer()
# looking at the number of families filling the regular questionnaires
all_fam_wide <- all_fam %>% pivot_wider(names_from=questionnaire, values_from=nb_filled) %>% replace(is.na(.), 0) %>%
mutate(F1_NutritionMotor_year1=F1_NutritionMotorDev_year1_Version2+F1_NutritionMotorDev_year1_Version1)%>%
mutate(F1_NutritionMotor_year2=F2_NutritionMotorDev_year2_Version2+F2_NutritionMotorDev_year2_Version1)
#infants questionnaires (background, Nutrition/Motor year 1 and 2)
all_fam_wide <- all_fam_wide %>% mutate(all_inf=A_background+F1_NutritionMotor_year1+F1_NutritionMotor_year2)
#infants frequency questionnaires: (E_Previous3Months, C_4to6months, D_7to12months, B_0to3months)
all_fam_wide <- all_fam_wide %>% mutate(all_reg=E_Previous3Months+C_4to6months+
D_7to12months+B_0to3months)
#parents questionnaires: (G_ParentF_FoodFrequency, G_ParentM_FoodFrequency, G_MotherDepression, G_MotherStress (in progress))
all_fam_wide <- all_fam_wide %>% mutate(all_parents=G_ParentF_FoodFrequency+G_ParentM_FoodFrequency+
G_MotherDepression)
# all main questionnaires
all_fam_wide <- all_fam_wide %>% mutate(all_main=all_inf+all_reg+all_parents)
write.csv(all_fam_wide, "per_familly_questionnaires.csv")
## output table
max_inf <- all_fam_wide %>% filter(all_inf==3) %>% tally() %>%
rename("all infants"="n")
max_reg <- all_fam_wide %>% filter(all_reg==38) %>% tally()%>%
rename("all infants frequency"="n")
max_parents <- all_fam_wide %>% filter(all_parents==5) %>% tally()%>%
rename("all parents"="n")
max_all <- all_fam_wide %>% filter(all_main==46) %>% tally()%>%
rename("all major questionnaires"="n")
max_infreg <- all_fam_wide %>% filter(all_reg==38 & all_inf==3) %>% tally()%>%
rename("all major infants and frequency"="n")
most_infreg <- all_fam_wide %>% filter(all_reg>=35 & all_inf==3) %>% tally()%>%
rename("all major infants and most frequency"="n")
table_out <- max_inf %>% add_column(max_reg) %>%
add_column(max_parents) %>%
add_column(max_all) %>%
add_column(max_infreg) %>%
add_column(most_infreg) %>%
mutate(name="nb families") %>%
pivot_longer(names_to = name)
table_out <- max_inf %>% add_column(max_reg) %>%
add_column(max_parents) %>%
add_column(max_all) %>%
add_column(max_infreg) %>%
add_column(most_infreg) %>%
pivot_longer(names_to="measures", values_to="nb families")
table_out <- max_inf %>% add_column(max_reg) %>%
add_column(max_parents) %>%
add_column(max_all) %>%
add_column(max_infreg) %>%
add_column(most_infreg) %>%
pivot_longer(everything(), names_to="measures", values_to="nb families")
View(table_out)
# looking at the number of families filling the regular questionnaires
all_fam_wide <- all_fam %>% pivot_wider(names_from=questionnaire, values_from=nb_filled) %>% replace(is.na(.), 0) %>%
mutate(F1_NutritionMotor_year1=F1_NutritionMotorDev_year1_Version2+F1_NutritionMotorDev_year1_Version1)%>%
mutate(F1_NutritionMotor_year2=F2_NutritionMotorDev_year2_Version2+F2_NutritionMotorDev_year2_Version1)
#infants questionnaires (background, Nutrition/Motor year 1 and 2)
all_fam_wide <- all_fam_wide %>% mutate(all_inf=A_background+F1_NutritionMotor_year1+F1_NutritionMotor_year2)
#infants frequency questionnaires: (E_Previous3Months, C_4to6months, D_7to12months, B_0to3months)
all_fam_wide <- all_fam_wide %>% mutate(all_reg=E_Previous3Months+C_4to6months+
D_7to12months+B_0to3months)
#parents questionnaires: (G_ParentF_FoodFrequency, G_ParentM_FoodFrequency, G_MotherDepression, G_MotherStress (in progress))
all_fam_wide <- all_fam_wide %>% mutate(all_parents=G_ParentF_FoodFrequency+G_ParentM_FoodFrequency+
G_MotherDepression)
# all main questionnaires
all_fam_wide <- all_fam_wide %>% mutate(all_main=all_inf+all_reg+all_parents)
write.csv(all_fam_wide, "per_familly_questionnaires.csv")
## output table
max_inf <- all_fam_wide %>% filter(all_inf==3) %>% tally() %>%
rename("all infants"="n")
max_reg <- all_fam_wide %>% filter(all_reg==38) %>% tally()%>%
rename("all infants frequency"="n")
max_parents <- all_fam_wide %>% filter(all_parents==5) %>% tally()%>%
rename("all parents"="n")
max_all <- all_fam_wide %>% filter(all_main==46) %>% tally()%>%
rename("all major questionnaires"="n")
max_infreg <- all_fam_wide %>% filter(all_reg==38 & all_inf==3) %>% tally()%>%
rename("all major infants and frequency"="n")
most_infreg <- all_fam_wide %>% filter(all_reg>=35 & all_inf==3) %>% tally()%>%
rename("all major infants and most frequency"="n")
table_out <- max_inf %>% add_column(max_reg) %>%
add_column(max_parents) %>%
add_column(max_all) %>%
add_column(max_infreg) %>%
add_column(most_infreg) %>%
pivot_longer(everything(), names_to="measures", values_to="nb families")
knitr::kable(table_out)
# get data from the dataCube
DC_folder="../../HELMi_curation/normalized_versions/DataCube"
baby_file <- paste(DC_folder, "baby.csv", sep="/")
setwd("~/Documents/Fin_Postdoc/projects/10K_16SHELMi/Raw_Data")
babyCube <- read.csv(baby_file)
# get 10k sample data
sample_file <- "formated/SampleTable_HELMi10k_16.02.21.csv"
sample <- read.csv(sample_file)
View(babyCube)
View(sample)
babyCube <- read.csv(baby_file) %>% mutate(family=(paste("Hel", familly_ID, sep="")))
# script to create the sample description file with relevant baby informations
library(tidyverse)
# get data from the dataCube
DC_folder="../../HELMi_curation/normalized_versions/DataCube"
baby_file <- paste(DC_folder, "baby.csv", sep="/")
babyCube <- read.csv(baby_file) %>% mutate(family=(paste("Hel", familly_ID, sep="")))
View(babyCube)
# join datasets
sample_enhanced <- left_join(sample, babyCube, by="family")
write_csv(sample_enhanced, "formated/SampleTableEnhanced_HELMi10k_16.02.21.csv")
# import tables and format for PhylloSeq
## create TaxTable
taxMat <- read_csv("../Raw_Data/formated/TaxTable_HELMi10k_16.02.21.csv")
taxMat <- taxMat %>% tibble::column_to_rownames("TaxID")
TAX = tax_table(as.matrix(taxMat))
setwd("~/Documents/Fin_Postdoc/projects/10K_16SHELMi/overview_analysis")
library(phyloseq)
library(tidyverse)
library(microbiome)
library(knitr)
# import tables and format for PhylloSeq
## create TaxTable
taxMat <- read_csv("../Raw_Data/formated/TaxTable_HELMi10k_16.02.21.csv")
taxMat <- taxMat %>% tibble::column_to_rownames("TaxID")
TAX = tax_table(as.matrix(taxMat))
## create countTable
countMat <- read_csv("../Raw_Data/formated/CountTable_HELMi10k_16.02.21.csv")
countMat <- countMat %>% tibble::column_to_rownames("TaxID")
OTU = otu_table(as.matrix(countMat), taxa_are_rows = TRUE)
## sample description file
# sampleMat <- read_csv("../Raw_Data/formated/SampleTable_HELMi10k_16.02.21.csv")
sampleMat <- read_csv("../Raw_Data/formated/SampleTableEnhanced_HELMi10k_16.02.21.csv")
sampleMat <- sampleMat %>%tibble::column_to_rownames("sample_ID")
SAMPLE = sample_data(as.data.frame(sampleMat))
physeq = phyloseq(OTU, TAX, SAMPLE)
# subset to controls
pseq.controls <- subset_samples(physeq, (sample_info == "cont" & ReadCount>100000))
# Convert to compositional data
pseq.controlsrel <- microbiome::transform(pseq.controls, "compositional")
# Ordinate the data
set.seed(4235421)
ord <- ordinate(pseq.controlsrel, "NMDS", "bray")
plot_ordination(pseq.controlsrel, ord, color = "family") +
geom_point(size = 2)
plot_ordination(pseq.controlsrel, ord, color = "run") +
geom_point(size = 2)
# subset to mother and fathers samples
pseq.parents <- subset_samples(physeq, (sample_type %in% c("M", "F") & ReadCount>100000))
#alpha analysis all
trich <-alpha(pseq.parents, index = "all")
plot_richness(pseq.parents, x = "sample_type") + geom_boxplot()
# significance testing
d <- meta(pseq.parentsrel)
# subset to mother and fathers samples
pseq.parents <- subset_samples(physeq, (sample_type %in% c("M", "F") & ReadCount>100000))
#alpha analysis all
trich <-alpha(pseq.parents, index = "all")
plot_richness(pseq.parents, x = "sample_type") + geom_boxplot()
# significance testing
d <- meta(pseq.parents)
d$diversity <- alpha(pseq.parents, "shannon")$diversity_shannon
# Split the values by group
spl <- split(d$diversity, d$sample_type)
# Kolmogorov-Smirnov test
pv <- ks.test(spl$F, spl$M)$p.value
# Adjust the p-value
padj <- p.adjust(pv)
# subset to baby samples
baby_times <- c("B1", "B2", "B3", "B4", "B5", "B6", "B7", "B8", "B9")
pseq.babies <- subset_samples(physeq, (sample_type %in% baby_times & ReadCount>100000))
#alpha analysis all
trich <-alpha(pseq.babies, index = "all")
# subset to baby samples
baby_times <- c("B1", "B2", "B3", "B4", "B5", "B6", "B7", "B8", "B9")
pseq.babies <- subset_samples(physeq, (sample_type %in% baby_times & ReadCount>100000))
#alpha analysis all
plot_richness(pseq.babies, x = "sample_type", measures=c("Observed", "Chao1", "Shannon", "Simpson")) + geom_boxplot()
d <- meta(pseq.babies)
d$diversity <- alpha(pseq.babies, "shannon")$diversity_shannon
# Split the values by group
spl <- split(d$diversity, d$sample_type)
# Kolmogorov-Smironv test
pv <- ks.test(spl$B1, spl$B3)$p.value
# Adjust the p-value
padj <- p.adjust(pv)
View(sampleMat)
# subset to baby samples
baby_earlytimes <- c("B1", "B2", "B3")
pseq.babyearly <- subset_samples(physeq, (sample_type %in% baby_earlytimes & ReadCount>100000))
# Convert to compositional data
pseq.babyearlyrel <- microbiome::transform(pseq.babyearly, "compositional")
# Ordinate the data
set.seed(4235421)
ord <- ordinate(pseq.babyearlyrel, "NMDS", "bray")
plot_ordination(pseq.babyearlyrel, ord, color = "sample_type") +
geom_point(size = 2)
plot_ordination(pseq.babyearlyrel, ord, color = "inf_DeliveryMode") +
geom_point(size = 2)
# apply envfit to the birthmode variable
birthMode = get_variable(baby_earlytimes, "inf_DeliveryMode")
View(pseq.babyearly)
?sample_data
head(sample_data(baby_earlytimes))
# apply envfit to the birthmode variable
birthMode = get_variable(pseq.babyearly, "inf_DeliveryMode")
sample_data(pseq.babyearly)$inf_DeliveryMode <- factor(inf_DeliveryMode)
sample_data(pseq.babyearly)
DeliveryMode <- c("Vaginal", "C-section")
sample_data(pseq.babyearly)$inf_DeliveryMode <- factor(DeliveryMode)
nmds.envfit <- envfit(ord$points, env = as.data.frame(sample_data(pseq.babyearly)$inf_DeliveryMode), perm = 999) #standard envfit
library(phyloseq)
library(tidyverse)
library(microbiome)
library(knitr)
library(vegan)
nmds.envfit <- envfit(ord$points, env = as.data.frame(sample_data(pseq.babyearly)$inf_DeliveryMode), perm = 999) #standard envfit
str(nmds.envfit)
nmds.envfit
# subset to baby samples
baby_earlytimes <- c("B1", "B2")
pseq.babyearly <- subset_samples(physeq, (sample_type %in% baby_earlytimes & ReadCount>100000))
# Convert to compositional data
pseq.babyearlyrel <- microbiome::transform(pseq.babyearly, "compositional")
# Ordinate the data
set.seed(4235421)
ord <- ordinate(pseq.babyearlyrel, "NMDS", "bray")
ord <- ordinate(pseq.babyearlyrel, "NMDS", "bray")
plot_ordination(pseq.babyearlyrel, ord, color = "sample_type") +
geom_point(size = 2)
plot_ordination(pseq.babyearlyrel, ord, color = "inf_DeliveryMode") +
geom_point(size = 2)
# apply envfit to the birthmode variable
birthMode = get_variable(pseq.babyearly, "inf_DeliveryMode")
DeliveryMode <- c("Vaginal", "C-section")
sample_data(pseq.babyearly)$inf_DeliveryMode <- factor(DeliveryMode)
nmds.envfit <- envfit(ord$points, env = as.data.frame(sample_data(pseq.babyearly)$inf_DeliveryMode), perm = 999) #standard envfit
nmds.envfit
# subset to families samples
family_times <- c("M", "F", "B9")
pseq.family <- subset_samples(physeq, (sample_type %in% family_times & ReadCount>100000))
# Convert to compositional data
pseq.familyrel <- microbiome::transform(pseq.family, "compositional")
plot_heatmap(pseq.familyrel, "NMDS", "bray", "sample_type", "Family")
plot_heatmap(pseq.familyrel, "NMDS", "bray")
View(sampleMat)
#pseq.family <- subset_samples(physeq, (sample_type %in% family_times & ReadCount>100000))
pseq.family <- subset_samples(physeq, (family=="Hel996")
#pseq.family <- subset_samples(physeq, (sample_type %in% family_times & ReadCount>100000))
pseq.family <- subset_samples(physeq, (family=="Hel996"))
#pseq.family <- subset_samples(physeq, (sample_type %in% family_times & ReadCount>100000))
pseq.family <- subset_samples(physeq, (family=="Hel996"))
# Convert to compositional data
pseq.familyrel <- microbiome::transform(pseq.family, "compositional")
plot_heatmap(pseq.familyrel, "NMDS", "bray")
highabund <- filter_taxa(pseq.family, function(x) sum(x > total*0.20) > 0, TRUE)
highabund <- filter_taxa(pseq.familyrel, function(x) sum(x > total*0.20) > 0, TRUE)
pseq.familyrel <- microbiome::transform(pseq.family, "compositional")
highabund <- top_taxa(pseq.familyrel, n = 10)
highabund
plot_heatmap(pseq.familyrel, "NMDS", "bray")
plot_heatmap(highabund, "NMDS", "bray")
highabund <- subset_taxa(pseq,top_taxa(pseq.familyrel, n = 10))
highabund <- subset_taxa(pseq.familyrel ,top_taxa(pseq.familyrel, n = 10))
top10 <- top_taxa(pseq.familyrel, n = 10)
highabund <- subset_taxa(pseq.familyrel ,top10 )
View(taxMat)
highabund <- subset_taxa(pseq.familyrel, taxa(pseq.familyrel) %in% top10)
View(highabund)
plot_heatmap(highabund, "NMDS", "bray")
# Sort the matrix rows and cols directly
xo <- neat(abundances(highabund), method = "NMDS", distance = "bray")
# Heatmap visualization
dfm <- melt(xo)
library(phyloseq)
library(tidyverse)
library(microbiome)
library(knitr)
library(vegan)
# Heatmap visualization
dfm <- melt(xo)
library(phyloseq)
library(tidyverse)
library(microbiome)
library(knitr)
library(vegan)
library(dplyr)
library(reshape2)
# Heatmap visualization
dfm <- melt(xo)
colnames(dfm) <- c("Taxa", "family", "value")
heat(dfm, "Taxa", "Sample", "value")
heat(dfm, "Taxa", "family", "value")
View(pseq.familyrel)
plot_heatmap(gpac, "NMDS", "bray", "sample_type", "Family")
plot_heatmap(highabund, "NMDS", "bray", "sample_type", "Family")
plot_heatmap(highabund, "NMDS", "bray", "sample_type")
plot_heatmap(highabund, "NMDS", "bray", "family")
View(highabund)
highabund@tax_table
plot_heatmap(highabund, "NMDS", "bray", "family", "Familly")
nb_sampleFam <- sampleMat %>% select(family, sample_type) %>% unique()
View(nb_sampleFam)
nb_sampleFam <- sampleMat %>% select(family, sample_type) %>% unique() %>% group_by(family) %>%
tally()
View(nb_sampleFam)
nb_sampleFam <- sampleMat %>% select(family, sample_type) %>% unique() %>% group_by(family) %>%
tally() %>% rename("nb_samples"="n")
sampleMat <- left_join(sampleMat, nb_sampleFam)
View(sampleMat)
sampleMat <- sampleMat %>%tibble::column_to_rownames("sample_ID")
## sample description file
# sampleMat <- read_csv("../Raw_Data/formated/SampleTable_HELMi10k_16.02.21.csv")
sampleMat <- read_csv("../Raw_Data/formated/SampleTableEnhanced_HELMi10k_16.02.21.csv")
nb_sampleFam <- sampleMat %>% select(family, sample_type) %>% unique() %>% group_by(family) %>%
tally() %>% rename("nb_samples"="n")
sampleMat <- left_join(sampleMat, nb_sampleFam)
sampleMat <- sampleMat %>%tibble::column_to_rownames("sample_ID")
SAMPLE = sample_data(as.data.frame(sampleMat))
physeq = phyloseq(OTU, TAX, SAMPLE)
View(sampleMat)
pseq.family <- subset_samples(physeq, (sample_type %in% family_times & ReadCount>100000 & nb_samples==10))
View(pseq.family)
pseq.familyrel <- microbiome::transform(pseq.family, "compositional")
pseq.familyrel <- microbiome::transform(pseq.family, "compositional")
top10 <- top_taxa(pseq.familyrel, n = 10)
highabund <- subset_taxa(pseq.familyrel, taxa(pseq.familyrel) %in% top10)
plot_heatmap(highabund, "NMDS", "bray", "family", "Familly")
pseq.familyrel <- microbiome::transform(pseq.family, "compositional")
plot_heatmap(highabund, "NMDS", "bray", "family", "Familly")
plot_heatmap(pseq.familyrel, "NMDS", "bray", "family", "Familly")
shiny::runApp('~/Documents/Fin_Postdoc/projects/HELMi_curation/HELMi_app')
# Load the data cube
# ----------------------------------
question_wide <- read_csv("../normalized_versions/DataCube/questionnaire.csv")
setwd("~/Documents/Fin_Postdoc/projects/HELMi_curation/HELMi_app")
# Load the data cube
# ----------------------------------
question_wide <- read_csv("../normalized_versions/DataCube/questionnaire.csv")
View(question_wide)
runApp()
runApp()
runApp()
Q1 <- read_csv("../normalized_versions/corrected_translated/Q1_norm_background_04.10.18.csv")
View(Q1)
runApp()
library("xlsx")
install.packages("xlsx")
library("xlsx")
library(xlsx)
shiny::runApp()
library(xlsx)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Load the data cube
# ----------------------------------
question_wide <- read_csv("../normalized_versions/DataCube/questionnaire.csv")
View(question_wide)
runApp()
View(question_wide)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
baby <- read_csv("../normalized_versions/DataCube/baby.csv")
View(baby)
View(baby)
View(baby)
runApp()
mother <- read_csv("../normalized_versions/DataCube/mother.csv")
View(mother)
View(mother)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(mother)
runApp()
